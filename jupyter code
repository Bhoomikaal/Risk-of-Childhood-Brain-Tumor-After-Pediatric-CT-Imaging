# Brain Tumor Risk Prediction After Pediatric CT Imaging (Simulated Data)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Create synthetic dataset
np.random.seed(42)
n = 1000

data = pd.DataFrame({
    'age_at_first_scan': np.random.randint(0, 15, n),  # age 0 to 14
    'num_ct_scans': np.random.randint(1, 10, n),
    'radiation_dose_mgy': np.random.normal(20, 5, n),  # milligray units
    'years_since_scan': np.random.randint(1, 15, n),
    'family_history': np.random.randint(0, 2, n),
})

# Step 2: Simulate labels (brain tumor risk)
# Probability based on a linear combination (just for simulation)
risk_score = (
    0.03 * data['age_at_first_scan'] +
    0.1 * data['num_ct_scans'] +
    0.05 * data['radiation_dose_mgy'] -
    0.02 * data['years_since_scan'] +
    0.5 * data['family_history']
)

# Apply sigmoid and threshold to simulate binary outcome
probability = 1 / (1 + np.exp(-risk_score))
data['brain_tumor'] = (probability > 0.5).astype(int)

# Step 3: Split data
X = data.drop('brain_tumor', axis=1)
y = data['brain_tumor']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train logistic regression
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Step 5: Evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 6: Predict on a new case
new_case = pd.DataFrame({
    'age_at_first_scan': [6],
    'num_ct_scans': [3],
    'radiation_dose_mgy': [22],
    'years_since_scan': [5],
    'family_history': [1]
})
risk_prob = model.predict_proba(new_case)[0][1]
print(f"\nPredicted Brain Tumor Risk: {risk_prob:.2%}")
